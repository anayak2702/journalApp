classpath - List of jars and directories that JVM uses.Classpath tells JVM where to find the bytecode. You will find .class
files, jars and configuration files. The path src/main/resources get automatically added in the classpath of spring boot.
If the place the application.properties anywhere else then we need to mention the path in classpath.
Similarly all the dependencies added by pom.xml get packages in the jars and are included in the classpath.

Similarly configurations can also be written in YAML file.(YAML a'nt markup language) (Extension is .yml)

If same property is mentioned in application.properties and application.yml , then application.properties takes precedence
over application.yml

In command line argument, java -jar .\journalApp-0.0.1-SNAPSHOT.jar --server.port=9090

So priority order:
command line argument --> application.properties --> application.yml

Unit testing, Integration testing

Unit testing - testing your components(functionality) individually. (Test Driven Developement) - test as you build
In spring unit testing is done through Junit (Java Unit)

In Junit, we need to Autowired services which need the SringContext to start, database to be connected, components to
be injected. In case we want to test without these as big projects can take time to load, then we can Mock, that can be acheived
through Mockito.(If there a userRepository that would actually connect to database and retrieve the username, we can mock the
repository to give us an userName without actually connecting to the database)

@Autowired
private UserDetailsServiceImpl userDetailsService;

@MockBean
private UserRepository userRepository;

--> When userDetailsService will be Autowired, then Mockbean will inject userRepository. When we are using autowired
    we were using Mockbean to inject the component. Autowired creates an instance else we get a NullPointerException.

--> Profiles: In Dev you can set the profile as dev in Edit Configurations in Spring.(spring.profiles.active=dev)
 But in Production you can't do like that.
    so we would need to create a jar file
    ./mvnw clean package -D spring.profiles.active=dev

--> If you don't have tests then only ./mvnw clean package would have worked.
--> Cd into the jar created in Target and then in terminal java -jar .\journalApp-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev

-D is used along with maven(./mvnw) to set the system properties
--> Jenkins automate all this stuff for us.

--> We can also decide which bean to load or not based on profile.
--> Multiple profiles can also be active at the same time
==============================================================
--> Logging is an essential aspect of application development that allows developers to monitor and troubleshoot
    their applications.
--> Spring Boot supports various logging frameworks, such as Logback, Log4j2 and Java Util Logging(JUL)
--> Logback: A popular logging framework that serves as the default in many Spring Boot applications. It offers a
    flexible configuration and good performance.
    Log4j2: Another widely used logging framework with features such as asynchronous logging and support for various
    output formats.
    Java Util Logging(JUL): The default logging framework included in the Java Standard Edition. While it's less
    feature-rich than some third-party frameworks, it is straightforward and is part of the Java platform.

--> The default configuration is embedded within the Spring Boot libraries,and it may not be visible in your
    project's source code. The logs that gets printed in the start up is nothing but logs.
--> If you want to customize the logging configuration, you can create your own logback-spring.xml or logback.xml
    in the src/main/resources directory. When Spring Boot detects the file in your project, it will use it instead
    of the default configuration.
--> Logging levels help in categorizing log statements based on their severity. The common logging levels are
    TRACE, DEBUG, INFO, WARN, ERROR
--> We can set the desired logging level for specific packages or classes, allowing them to control the amount of
    information logged at runtime.
--> By default, logging is enabled for INFO, WARN, ERROR
--> Spring Boot provides annotations like @slf4j and @Log4j2 that you can use to automatically inject logger instances
    into your classes.
--> Spring Boot allows us to configure logging using properties or YAML files.
--> Once we set the logging level as DEBUG then all the logs more severe than DEBUG along with DEBUG will get printed.
--> logging:
      level:
        root: ERROR --> Applies to all the packages including internal as well.
     logging:
           level:
             <packagename>: OFF --> to OFF the logs in a particular package
--> Choice between logback.XML or YAML : XML is preferred as it is specifically used for Logging.
--> XML
    # The <configuration> element is the root element of the logback.xml file. All Logback configuration is enclosed
      within this element.
    # Appender and Logger information goes here
        Appender: Tells where to print the logs e.g. console,file
=======================================================================

--> Code Quality: SonarQube
--> SonarQube, SonarLint, SonarCloud